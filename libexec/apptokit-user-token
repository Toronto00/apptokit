#!/usr/bin/env ruby
# Usage: apptokit user-token [--no-auto-open] [--force] [--code=<oauth code>] [--user=<user>]
# Summary: Generate an User-Server token for a GitHub App installation.
# Help: This command will attempt to auto generate a User authenticated token for a GitHub App.
#
# NOTE: This requires using your browser and specific configuration of your GitHub App.
#
#  This generates a token by walking your browser through the OAuth flow and grabbing the OAuth
#  provided.
#
#  Your App must have a Callback URL specified in you Application settings that
#  is specified by the Apptokit options:
#
#     - oauth_callback_port:     defaults to 8075
#     - oauth_callback_bind:     defaults to localhost
#     - oauth_callback_path:     defaults to /callback
#     - oauth_callback_hostname: defaults to localhost
#
#  Further, as this authenticates using your browser session the token will be
#  issued to the User that is logged in in your browser.
#
#  This command can auto open your browser (used value in $BROWSER, on MacOS this is `open`)
#  or if you need it to specify --no-auto-open and it will provide you a URL to open.

require "setup"
require "apptokit/user_token"
require 'optparse'

options = {skip_cache: false, auto_open: true, user: nil, code: nil}
OptionParser.new do |opts|
  opts.on("-f", "--force", "Don't use a cached token") do |v|
    options[:skip_cache] = v
  end

  opts.on("-n", "--no-auto-open", "Don't automatically open the browser window") do |v|
    options[:auto_open] = v
  end

  opts.on("-uUSER", "--user=USER", "The user to authorize") do |user|
    options[:user] = user
  end

  opts.on("-cCODE", "--code=CODE", "The OAuth code received from GitHub") do |code|
    options[:code] = code
  end

  opts.on("-rTOKEN", "--refresh-token=TOKEN", "The OAuth refresh token received from GitHub when access token is issued.") do |token|
    options[:refresh_token] = token
  end
end.parse!

DummyToken = Struct.new(:token) do
  def header
    "token #{token}"
  end

  def token_type
    "bearer"
  end

  def refresh_token
    nil
  end
end

token = ENV["APPTOKIT_USER_TOKEN"] && DummyToken.new(ENV["APPTOKIT_USER_TOKEN"])
token ||= if options[:refresh_token]
  Apptokit::UserToken.refresh(token: options[:refresh_token])
else
  Apptokit::UserToken.generate(options)
end

if $stdout.isatty
  puts "Your token:"
  puts token.token
  puts "Token type: #{token.token_type}"
  if token.refresh_token
    puts "Expires in: #{token.expires_in}"
    puts "Refresh token:\n#{token.refresh_token}"
    puts "Refresh token expires in: #{token.refresh_token_expires_in}"
  end
else
  print token.header
end
