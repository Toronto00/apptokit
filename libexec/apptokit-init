#!/usr/bin/env ruby
# Usage: apptokit init <path> [--env=env]
# Summary: Generate a .apptokit.yml or add a new App environment
# Help: This command will provide you with a starting point to use Apptokit,
# Or, if you're already up and running will provide you with a template for adding
# a new Apptokit environment.
#
#
# Examples:
#
#    apptokit init .            # Generates a basic apptokit.yml config
#    apptokit init . --env test # Will add a "test" environment to your existing
#                                 config or generate a config with a test environment
require "setup"
require "pathname"
require "yaml"
require "fileutils"
require "erb"

dir = ARGV.shift

if dir == "."
  dir = Dir.pwd
end

if %w(--env -e).include?(dir)
  env = ARGV.shift
  dir = ARGV.shift
else
  if ARGV.shift
    env = ARGV.shift
  end
end

dir = Pathname.new(dir)
yaml_path = dir.join(".apptokit.yml")
backup_yaml_path = "#{yaml_path}.bac"

existing = yaml_path.exist?

if existing && !env
  print "Overwrite existing config at '#{yaml_path}'? (Y/n) "
  ans = gets.chomp
  if ans.upcase != "Y"
    puts "Not overwriting..."
    puts `apptokit help init`
    exit 1
  else
    puts "Archiving original to .bac because we ❤️  you..."
    FileUtils.mv(yaml_path, backup_yaml_path, verbose: true)

    at_exit do
      if !yaml_path.exist? && File.exist?(backup_yaml_path)
        puts "Something went wrong and we're exiting without a .apptokit.yml, attempting to restore backup..."
        FileUtils.mv(backup_yaml_path, yaml_path, verbose: true)
      end
    end
  end
end

full_template = Apptokit::Configuration::SHARE_DIR.join("apptokit-full-template.yml")

if !existing
  puts "Creating .apptokit.yml..."
  FileUtils.cp(full_template, yaml_path)
else
  puts "Updating .apptokit.yml..."
end

if env
  env_template = Apptokit::Configuration::SHARE_DIR.join("apptokit-env-template.yml")
  if existing
    existing_conf = YAML.load_file(yaml_path)
    if existing_conf.has_key?(env)
      warn "WARNING: duplicate env '#{env}', this configuration will replace previously existing '#{env}' env when parsed by YAML."
    end
  end

  env_out = ERB.new(File.read(env_template)).result(binding)

  File.open(yaml_path, "a+") do |file|
    file.puts env_out
  end
end
puts "\ndone. Fill in

#{yaml_path}

with your GitHub App specifics.
✨"
