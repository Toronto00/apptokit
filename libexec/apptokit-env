#!/usr/bin/env ruby
# Usage: apptokit env
# Summary: Provide information about the currently configured GitHub App
# Help:
# Displays the configuration settings that would be picked up when running apptokit.
#
#   - apptokit env
#   - github_url
#   - app_id
#   - installation_id
#   - private key path
#   - webhook_secret
#   - client_id
#
# Flags:
#
# --[e]dit  edit your apptokit config
# --[l]ist  list your configured apptokit environments.

require "setup"

def value(padding, name, value)
  label = "\e[1m#{name}:\e[22m"
  spaces = " " * (name.length - padding).abs
  "#{label} #{spaces} #{value}"
end

def values(conf)
  values = {}
  values["APPTOKIT_ENV"] = conf.env
  values["GitHub URL"] = conf.github_url
  values["App ID"] = conf.app_id
  values["Installation ID"] = conf.installation_id
  values["Private key path"] = conf.private_key_path
  values["Webhook secret"] = conf.webhook_secret.inspect
  values["Client ID"] = conf.client_id
  values
end

def display(values)
  padding = values.keys.max { |a, b| a.length <=> b.length }.length

  values.each do |label, value|
    puts value(padding, label, value)
  end
end

edit_envs = (%w(--edit -e) & ARGV).any?
list_envs = (%w(--list -l list) & ARGV).any?
show_envs = ARGV & Apptokit::Configuration.environments

if $stdout.isatty
  if edit_envs
    Kernel.exec(ENV["EDITOR"], Apptokit::Configuration::HOME_DIR_CONF_PATH.to_s)
  elsif list_envs
    puts "Apptokit knows about these environments:"
    Apptokit::Configuration.environments.each do |env|
      env = Apptokit::Configuration.new(env)
      url = env.github_url == Apptokit::Configuration::DEFAULT_GITHUB_URL ? "" : " (#{env.github_url})"
      puts " - #{env.env}#{url}"
    end
  elsif show_envs.any?
    show_envs.each do |env|
      puts "Apptokit ENV #{env} will use:"
      display(values(Apptokit::Configuration.new(env)))
      puts
    end
  else
    puts "Apptokit is currently configured to use:"
    display(values(Apptokit.config))
  end
else
  require 'json'
  if list_envs
    print Apptokit.environments.to_json
  elsif show_envs.any?
    output = show_envs.each_with_object({}) do |env, out|
      out[env] = values(Apptokit::Configuration.new(env))
    end
    print output.to_json
  else
    print values(Apptokit.config).to_json
  end
end

